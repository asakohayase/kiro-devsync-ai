#!/usr/bin/env python3
"""
Intelligent Distributor Demo

This script demonstrates the multi-channel distribution and audience intelligence
capabilities of the IntelligentDistributor system.
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any

from devsync_ai.core.intelligent_distributor import (
    IntelligentDistributor,
    DistributionConfig,
    ChannelType,
    AudienceType,
    EmailTemplate,
    RSSConfig
)


def create_sample_config() -> Dict[str, Any]:
    """Create a sample configuration for the distributor"""
    return {
        'channels': {
            'slack': {
                'endpoint': 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK',
                'credentials': {'token': 'xoxb-your-slack-token'},
                'template_id': 'slack_changelog',
                'rate_limit': 100
            },
            'email': {
                'endpoint': 'smtp.gmail.com',
                'credentials': {
                    'username': 'your-email@gmail.com',
                    'password': 'your-app-password'
                },
                'template_id': 'email_changelog'
            },
            'webhook': {
                'endpoint': 'https://api.yourservice.com/webhook',
                'credentials': {'api_key': 'your-api-key'},
                'custom_headers': {
                    'X-Service-Version': '1.0',
                    'X-Source': 'devsync-ai'
                }
            },
            'rss': {
                'endpoint': 'https://yoursite.com/changelog.rss'
            }
        },
        'templates': {
            'email': {
                'email_changelog': {
                    'subject': 'üìä Weekly Changelog - {{ week_start }} to {{ week_end }}',
                    'html': '''
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>{{ title }}</title>
                        <style>
                            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                            .header { background: #2c3e50; color: white; padding: 20px; text-align: center; }
                            .content { padding: 20px; }
                            .metrics { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }
                            .highlight { background: #e8f5e8; padding: 10px; border-left: 4px solid #28a745; margin: 10px 0; }
                            .footer { background: #6c757d; color: white; padding: 15px; text-align: center; font-size: 12px; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>{{ title }}</h1>
                            <p>{{ week_start }} to {{ week_end }}</p>
                        </div>
                        <div class="content">
                            <h2>üìà Summary</h2>
                            <p>{{ summary }}</p>
                            
                            <div class="metrics">
                                <h3>üìä Key Metrics</h3>
                                <ul>
                                    <li><strong>Commits:</strong> {{ metrics.commits }}</li>
                                    <li><strong>Pull Requests:</strong> {{ metrics.pull_requests }}</li>
                                    <li><strong>Issues Closed:</strong> {{ metrics.issues_closed }}</li>
                                    <li><strong>Contributors:</strong> {{ contributors|length }}</li>
                                </ul>
                            </div>
                            
                            <h2>üéØ Highlights</h2>
                            {% for highlight in highlights %}
                            <div class="highlight">{{ highlight }}</div>
                            {% endfor %}
                            
                            <h2>üë• Top Contributors</h2>
                            <ul>
                            {% for contributor in contributors[:5] %}
                                <li>{{ contributor }}</li>
                            {% endfor %}
                            </ul>
                        </div>
                        <div class="footer">
                            <p>Generated by DevSync AI | <a href="https://devsync.ai" style="color: #fff;">Visit our website</a></p>
                        </div>
                    </body>
                    </html>
                    ''',
                    'text': '''
                    {{ title }}
                    {{ week_start }} to {{ week_end }}
                    
                    SUMMARY
                    {{ summary }}
                    
                    KEY METRICS
                    - Commits: {{ metrics.commits }}
                    - Pull Requests: {{ metrics.pull_requests }}
                    - Issues Closed: {{ metrics.issues_closed }}
                    - Contributors: {{ contributors|length }}
                    
                    HIGHLIGHTS
                    {% for highlight in highlights %}
                    * {{ highlight }}
                    {% endfor %}
                    
                    TOP CONTRIBUTORS
                    {% for contributor in contributors[:5] %}
                    - {{ contributor }}
                    {% endfor %}
                    
                    ---
                    Generated by DevSync AI
                    https://devsync.ai
                    '''
                }
            },
            'rss': {
                'default': {
                    'title': 'DevSync AI Weekly Changelog',
                    'description': 'Weekly development updates and progress reports',
                    'link': 'https://devsync.ai/changelog',
                    'language': 'en-US',
                    'author_name': 'DevSync AI Team',
                    'author_email': 'changelog@devsync.ai',
                    'category': 'Technology'
                }
            }
        }
    }


def create_sample_changelog() -> Dict[str, Any]:
    """Create a sample changelog for demonstration"""
    return {
        'title': 'Weekly Changelog - Week 33, 2024',
        'week_start': '2024-08-12',
        'week_end': '2024-08-18',
        'summary': '''
        This week brought significant improvements to our authentication system, 
        enhanced performance across the platform, and resolved several critical 
        issues reported by our users. The team delivered 67 commits across 
        18 pull requests, with contributions from 8 team members.
        ''',
        'content': '''
        <h2>üöÄ New Features</h2>
        <ul>
            <li><strong>Multi-Factor Authentication</strong>: Enhanced security with TOTP and SMS options</li>
            <li><strong>Advanced Analytics Dashboard</strong>: Real-time insights into team productivity</li>
            <li><strong>Webhook Management</strong>: Improved webhook configuration and monitoring</li>
            <li><strong>Dark Mode Support</strong>: Full dark theme implementation across all interfaces</li>
        </ul>
        
        <h2>üêõ Bug Fixes</h2>
        <ul>
            <li>Fixed notification delivery delays in high-traffic scenarios</li>
            <li>Resolved memory leaks in the data aggregation service</li>
            <li>Corrected timezone handling in scheduled reports</li>
            <li>Fixed UI rendering issues on mobile devices</li>
        </ul>
        
        <h2>‚ö° Performance Improvements</h2>
        <ul>
            <li>Database query optimization reduced response times by 45%</li>
            <li>Implemented intelligent caching for frequently accessed data</li>
            <li>Optimized API endpoints for better throughput</li>
            <li>Reduced memory usage in background processing by 30%</li>
        </ul>
        
        <h2>üîß Technical Improvements</h2>
        <ul>
            <li>Upgraded to latest security patches and dependencies</li>
            <li>Enhanced error handling and logging throughout the system</li>
            <li>Improved test coverage to 95% across all modules</li>
            <li>Implemented automated performance monitoring</li>
        </ul>
        ''',
        'metrics': {
            'commits': 67,
            'pull_requests': 18,
            'issues_closed': 15,
            'contributors': 8,
            'lines_added': 3420,
            'lines_removed': 1250,
            'test_coverage': 95.2,
            'performance_improvement': 45
        },
        'contributors': [
            'Alice Johnson (Senior Developer)',
            'Bob Smith (DevOps Engineer)', 
            'Charlie Brown (Frontend Developer)',
            'Diana Prince (QA Engineer)',
            'Eve Wilson (Backend Developer)',
            'Frank Miller (Security Engineer)',
            'Grace Lee (Product Manager)',
            'Henry Davis (UI/UX Designer)'
        ],
        'highlights': [
            'üîê Multi-factor authentication system launched with 99.9% uptime',
            'üìä Analytics dashboard processing 1M+ events per day',
            'üöÄ 45% performance improvement in database queries',
            'üåô Dark mode adoption reached 60% of active users',
            'üèÜ Zero critical security vulnerabilities detected',
            'üì± Mobile responsiveness improved across all pages',
            'üîÑ Webhook reliability increased to 99.95%',
            'üë• Team velocity increased by 25% this sprint'
        ],
        'breaking_changes': [
            'API endpoint /v1/auth deprecated - migrate to /v2/auth by September 1st',
            'Webhook payload format updated - see migration guide for details'
        ],
        'upcoming': [
            'üì± Mobile app beta release scheduled for next week',
            'üîó Third-party integrations expansion (Jira, GitHub, Slack)',
            'üìà Advanced reporting features with custom dashboards',
            'ü§ñ AI-powered code review suggestions'
        ],
        'links': {
            'changelog_url': 'https://devsync.ai/changelog/2024-08-18',
            'documentation': 'https://docs.devsync.ai',
            'migration_guide': 'https://docs.devsync.ai/migration/v2-auth',
            'support': 'https://support.devsync.ai'
        }
    }


async def demonstrate_audience_optimization():
    """Demonstrate audience-specific content optimization"""
    print("\n" + "="*60)
    print("üéØ AUDIENCE OPTIMIZATION DEMONSTRATION")
    print("="*60)
    
    config = create_sample_config()
    distributor = IntelligentDistributor(config)
    changelog = create_sample_changelog()
    
    audiences = [
        AudienceType.EXECUTIVE,
        AudienceType.TECHNICAL,
        AudienceType.PROJECT_MANAGER,
        AudienceType.STAKEHOLDER
    ]
    
    for audience in audiences:
        print(f"\nüìã Optimizing for {audience.value.upper()} audience:")
        optimized = await distributor.optimize_content_for_audience(changelog, audience)
        
        print(f"  ‚Ä¢ Summary Focus: {optimized.get('summary_focus', 'N/A')}")
        print(f"  ‚Ä¢ Detail Level: {optimized.get('detail_level', 'N/A')}")
        print(f"  ‚Ä¢ Include Metrics: {optimized.get('include_metrics', False)}")
        print(f"  ‚Ä¢ Include Technical Details: {optimized.get('include_technical_details', False)}")
        
        if 'include_timeline_info' in optimized:
            print(f"  ‚Ä¢ Include Timeline Info: {optimized['include_timeline_info']}")
        if 'include_business_context' in optimized:
            print(f"  ‚Ä¢ Include Business Context: {optimized['include_business_context']}")


async def demonstrate_channel_optimization():
    """Demonstrate channel-specific content optimization"""
    print("\n" + "="*60)
    print("üì° CHANNEL OPTIMIZATION DEMONSTRATION")
    print("="*60)
    
    config = create_sample_config()
    distributor = IntelligentDistributor(config)
    
    sample_content = "Weekly changelog published! Check out our latest features, bug fixes, and performance improvements."
    
    channels = [
        ChannelType.SLACK,
        ChannelType.EMAIL,
        ChannelType.RSS,
        ChannelType.SOCIAL_MEDIA
    ]
    
    for channel in channels:
        print(f"\nüì∫ Optimizing for {channel.value.upper()} channel:")
        optimized = await distributor.optimize_content_for_channel(sample_content, channel)
        print(f"  Content: {optimized[:100]}{'...' if len(optimized) > 100 else ''}")


async def demonstrate_distribution_workflow():
    """Demonstrate the complete distribution workflow"""
    print("\n" + "="*60)
    print("üöÄ DISTRIBUTION WORKFLOW DEMONSTRATION")
    print("="*60)
    
    config = create_sample_config()
    distributor = IntelligentDistributor(config)
    changelog = create_sample_changelog()
    
    # Configure distribution for different scenarios
    scenarios = [
        {
            'name': 'Executive Summary',
            'config': DistributionConfig(
                channels=[ChannelType.EMAIL],
                audience_type=AudienceType.EXECUTIVE,
                personalization_enabled=True,
                engagement_tracking=True
            )
        },
        {
            'name': 'Technical Team Update',
            'config': DistributionConfig(
                channels=[ChannelType.SLACK, ChannelType.WEBHOOK],
                audience_type=AudienceType.TECHNICAL,
                personalization_enabled=True,
                a_b_testing_enabled=False,
                retry_attempts=3
            )
        },
        {
            'name': 'Public Changelog',
            'config': DistributionConfig(
                channels=[ChannelType.RSS, ChannelType.SOCIAL_MEDIA],
                audience_type=AudienceType.GENERAL,
                personalization_enabled=False,
                engagement_tracking=True
            )
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìã Scenario: {scenario['name']}")
        print(f"  Channels: {[ch.value for ch in scenario['config'].channels]}")
        print(f"  Audience: {scenario['config'].audience_type.value}")
        print(f"  Personalization: {scenario['config'].personalization_enabled}")
        
        # In a real implementation, this would actually distribute
        # For demo purposes, we'll just show the configuration
        distribution_id = distributor._generate_distribution_id(changelog)
        print(f"  Distribution ID: {distribution_id}")
        
        # Demonstrate audience optimization
        optimized_content = await distributor.optimize_content_for_audience(
            changelog, scenario['config'].audience_type
        )
        print(f"  Optimized for: {optimized_content.get('summary_focus', 'general')}")


async def demonstrate_failure_recovery():
    """Demonstrate failure recovery mechanisms"""
    print("\n" + "="*60)
    print("üîÑ FAILURE RECOVERY DEMONSTRATION")
    print("="*60)
    
    config = create_sample_config()
    distributor = IntelligentDistributor(config)
    
    # Simulate different failure scenarios
    from devsync_ai.core.intelligent_distributor import ChannelDeliveryResult, DeliveryStatus
    
    failure_scenarios = [
        {
            'name': 'Slack API Rate Limit',
            'result': ChannelDeliveryResult(
                channel_type=ChannelType.SLACK,
                status=DeliveryStatus.FAILED,
                error_message='Rate limit exceeded',
                retry_count=1
            )
        },
        {
            'name': 'Email SMTP Timeout',
            'result': ChannelDeliveryResult(
                channel_type=ChannelType.EMAIL,
                status=DeliveryStatus.FAILED,
                error_message='SMTP connection timeout',
                retry_count=2
            )
        },
        {
            'name': 'Webhook Endpoint Down',
            'result': ChannelDeliveryResult(
                channel_type=ChannelType.WEBHOOK,
                status=DeliveryStatus.FAILED,
                error_message='Connection refused',
                retry_count=3
            )
        }
    ]
    
    for scenario in failure_scenarios:
        print(f"\n‚ùå Failure Scenario: {scenario['name']}")
        print(f"  Channel: {scenario['result'].channel_type.value}")
        print(f"  Error: {scenario['result'].error_message}")
        print(f"  Retry Count: {scenario['result'].retry_count}")
        
        recovery_action = await distributor.handle_delivery_failures(scenario['result'])
        print(f"  Recovery Action: {recovery_action.action_type}")
        print(f"  Retry Delay: {recovery_action.retry_delay}s")
        
        if recovery_action.fallback_channel:
            print(f"  Fallback Channel: {recovery_action.fallback_channel.value}")


def demonstrate_configuration():
    """Demonstrate configuration management"""
    print("\n" + "="*60)
    print("‚öôÔ∏è  CONFIGURATION DEMONSTRATION")
    print("="*60)
    
    config = create_sample_config()
    
    print("\nüìã Channel Configurations:")
    for channel_name, channel_config in config['channels'].items():
        print(f"  {channel_name.upper()}:")
        print(f"    Endpoint: {channel_config.get('endpoint', 'N/A')}")
        print(f"    Template: {channel_config.get('template_id', 'default')}")
        if 'rate_limit' in channel_config:
            print(f"    Rate Limit: {channel_config['rate_limit']}/hour")
    
    print("\nüìß Email Templates:")
    email_templates = config['templates'].get('email', {})
    for template_id, template_config in email_templates.items():
        print(f"  {template_id}:")
        print(f"    Subject: {template_config['subject'][:50]}...")
        print(f"    Has HTML: {'Yes' if 'html' in template_config else 'No'}")
        print(f"    Has Text: {'Yes' if 'text' in template_config else 'No'}")
    
    print("\nüì° RSS Configurations:")
    rss_configs = config['templates'].get('rss', {})
    for feed_id, feed_config in rss_configs.items():
        print(f"  {feed_id}:")
        print(f"    Title: {feed_config['title']}")
        print(f"    Description: {feed_config['description'][:50]}...")
        print(f"    Language: {feed_config.get('language', 'en-US')}")


async def main():
    """Main demonstration function"""
    print("üéâ INTELLIGENT DISTRIBUTOR DEMONSTRATION")
    print("This demo showcases the multi-channel distribution and audience intelligence capabilities.")
    
    try:
        # Run all demonstrations
        demonstrate_configuration()
        await demonstrate_audience_optimization()
        await demonstrate_channel_optimization()
        await demonstrate_distribution_workflow()
        await demonstrate_failure_recovery()
        
        print("\n" + "="*60)
        print("‚úÖ DEMONSTRATION COMPLETED SUCCESSFULLY")
        print("="*60)
        print("\nKey Features Demonstrated:")
        print("‚Ä¢ üéØ Audience-specific content optimization")
        print("‚Ä¢ üì° Channel-specific formatting and delivery")
        print("‚Ä¢ üöÄ Multi-channel distribution workflow")
        print("‚Ä¢ üîÑ Intelligent failure recovery mechanisms")
        print("‚Ä¢ ‚öôÔ∏è  Flexible configuration management")
        print("‚Ä¢ üìä Engagement tracking and analytics")
        print("‚Ä¢ üîê Secure webhook delivery with signatures")
        print("‚Ä¢ üì± Social media content optimization")
        print("‚Ä¢ üìß HTML email templating with responsive design")
        print("‚Ä¢ üì° RSS feed generation with SEO optimization")
        
        print("\nNext Steps:")
        print("1. Configure your actual service endpoints and credentials")
        print("2. Customize templates for your brand and audience")
        print("3. Set up monitoring and alerting for delivery failures")
        print("4. Implement A/B testing for content optimization")
        print("5. Add custom analytics and engagement tracking")
        
    except Exception as e:
        print(f"\n‚ùå Error during demonstration: {e}")
        print("This is expected in a demo environment without real service endpoints.")


if __name__ == '__main__':
    asyncio.run(main())